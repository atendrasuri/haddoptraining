package com.sapient;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.broadcast.Broadcast;
import org.apache.spark.util.LongAccumulator;

import scala.Tuple2;

public class Solution {

	public static void main(String args[]) throws Exception {

		SparkConf sparkConf = new SparkConf().setAppName("test").setMaster("local");
		JavaSparkContext jsc = new JavaSparkContext(sparkConf);
		JavaRDD<String> custs = jsc.textFile("C:\\BigData\\custs");
		JavaRDD<String> txns = jsc.textFile("C:\\BigData\\txns");
		System.out.println("hello");
		JavaRDD<String> txns1 = txns.flatMap(s -> Arrays.asList(s.split("/n")).iterator());
		JavaRDD<String> custs1 = custs.flatMap(s -> Arrays.asList(s.split("/n")).iterator());

		JavaRDD<String> reRDD1 = custs1.repartition(2);
		JavaRDD<String> reRDD2 = txns1.repartition(2);

		JavaPairRDD<Integer, Double> txns2 = reRDD2
				.mapToPair(s -> new Tuple2<>(Integer.parseInt(s.split(",")[2]), Double.parseDouble(s.split(",")[3])));

		JavaPairRDD<Integer, Double> txns3 = txns2.reduceByKey((i1, i2) -> i1 + i2);
		System.out.println("Hello Output");
		System.out.println(txns3.collect().toString());

		JavaPairRDD<Integer, String> custs3 = reRDD1
				.mapToPair(s -> new Tuple2<>(Integer.parseInt(s.split(",")[0]), s.split(",")[1]));

		System.out.println(custs3.collect().toString());

		JavaPairRDD<Integer, Tuple2<String, Double>> result = custs3.join(txns3);

		result.sortByKey();

		List<Tuple2<String, Double>> j = result.values().collect();
		j.sort((p1, p2) -> p1._2.compareTo(p2._2));
		System.out.println(j);

	}
}

/*
 * class MyComparator implements Comparator {
 * 
 * @Override public int compare(Object o1, Object o2) {
 * 
 * JavaPairRDD<Integer, Tuple2<String, Double>> jpr1= (JavaPairRDD<Integer,
 * Tuple2<String, Double>>) o1; JavaPairRDD<Integer, Tuple2<String, Double>>
 * jpr2= (JavaPairRDD<Integer, Tuple2<String, Double>>) o2;
 * 
 * 
 * }
 */
